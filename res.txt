============================================================================================================

1st trail results:
accuracy: 0.6325 - loss: 1.1148

============================================================================================================
model = tf.keras.models.Sequential([

        tf.keras.layers.Conv2D(16, (3, 3), activation = "relu", input_shape = (IMG_WIDTH, IMG_HEIGHT, 3)),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        # tf.keras.layers.Conv2D(32, (3, 3), activation="relu"),
        # tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),

        tf.keras.layers.Flatten(),

        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.Dropout(0.2),

        tf.keras.layers.Dense(NUM_CATEGORIES, activation='softmax')
    ])

============================================================================================================

2nd trail results:
accuracy: 0.9594 - loss: 0.1813

============================================================================================================

model = tf.keras.models.Sequential([

        tf.keras.layers.Conv2D(16, (3, 3), activation = "relu", input_shape = (IMG_WIDTH, IMG_HEIGHT, 3)),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(32, (3, 3), activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),

        tf.keras.layers.Flatten(),

        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.Dropout(0.2),

        tf.keras.layers.Dense(NUM_CATEGORIES, activation='softmax')
    ])

============================================================================================================

3rd trail results:
accuracy: 0.9638 - loss: 0.1746

============================================================================================================

model = tf.keras.models.Sequential([

    tf.keras.layers.Conv2D(32, (3, 3), activation = "relu", input_shape = (IMG_WIDTH, IMG_HEIGHT, 3)),
    tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

    tf.keras.layers.Conv2D(32, (3, 3), activation="relu"),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),

    tf.keras.layers.Flatten(),

    tf.keras.layers.Dense(128, activation="relu"),
    tf.keras.layers.Dropout(0.2),

    tf.keras.layers.Dense(NUM_CATEGORIES, activation='softmax')
])

============================================================================================================

4th trail results:
accuracy: 0.9659 - loss: 0.1399

============================================================================================================

model = tf.keras.models.Sequential([

        tf.keras.layers.Conv2D(16, (3, 3), activation = "relu", input_shape = (IMG_WIDTH, IMG_HEIGHT, 3)),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(32, (3, 3), activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),

        tf.keras.layers.Conv2D(64, (3, 3), activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),

        tf.keras.layers.Flatten(),

        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.Dropout(0.25),

        tf.keras.layers.Dense(NUM_CATEGORIES, activation='softmax')
    ])

============================================================================================================

5th trail results:
accuracy: 0.9826 - loss: 0.0614

============================================================================================================

model = tf.keras.models.Sequential([

        tf.keras.layers.Conv2D(32, (3, 3), activation = "relu", input_shape = (IMG_WIDTH, IMG_HEIGHT, 3)),
        tf.keras.layers.MaxPooling2D(pool_size = (2, 2)),

        tf.keras.layers.Conv2D(64, (3, 3), activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),

        tf.keras.layers.Conv2D(128, (3, 3), activation="relu"),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),

        tf.keras.layers.Flatten(),

        tf.keras.layers.Dense(128, activation="relu"),
        tf.keras.layers.Dropout(0.25),

        tf.keras.layers.Dense(NUM_CATEGORIES, activation='softmax')
    ])

============================================================================================================